#include <dt-bindings/zmk/matrix_transform.h>
#include <zmk_driver_animation/animation.dtsi>
#include <zmk_driver_animation/animation_layer_status.dtsi>
#include <dt-bindings/zmk_driver_animation/animation_control.h>
#include <dt-bindings/zmk_driver_animation/animation_trigger.h>
#include <dt-bindings/input/input-event-codes.h>
#include <dt-bindings/led/led.h>
#include <behaviors/animation_trigger.dtsi>
#include <input/processors.dtsi>

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;

        zmk,physical-layout = &default_layout;
        zmk,battery = &vbatt;

        zmk,animation = &root_animation;
        zmk,animation-control = &root_animation;
    };

    // マトリクス変換（RC() → 数値展開済み）
    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <11>;
        rows = <4>;
        map = <
            0x0000 0x0001 0x0002 0x0003 0x0004 0x0006 0x0007 0x0008 0x0009 0x000A
            0x0100 0x0101 0x0102 0x0103 0x0104 0x0306 0x0106 0x0107 0x0108 0x0109 0x010A
            0x0200 0x0201 0x0202 0x0203 0x0204 0x0205 0x0307 0x0206 0x0207 0x0208 0x0209 0x020A
            0x0300 0x0301 0x0302 0x0303 0x0304 0x0305 0x0308 0x0309 0x030A
        >;
    };

    // KSCAN（GPIOマトリクス）
    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";
        row-gpios =
            <&xiao_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
            <&xiao_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
            <&xiao_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
            <&xiao_d 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
    };

    // 入力プロセッサとトラックボール処理
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors = <&zip_temp_layer TRACKBALL_L 500>;

        scroller {
            layers = <SCROLL_L>;
            input-processors = <&zip_xy_scaler 1 60 &zip_xy_to_scroll_mapper>;
        };
    };

    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <100>;
        excluded-positions = <19 20 21 22 32 33 41 52 53 54 55 56 57 58 59>;
    };

    // 🔋 Ni-MH単四×1（昇圧入力側測定）
    vbatt: vbatt {
        compatible = "zmk,battery-voltage-divider";
        io-channels = <&adc 0>;
        output-ohms = <100000>;
        full-ohms = <570000>;

        mv-to-pct-thresholds = <
            1000 1050 1100 1150 1180 1200 1250 1300 1350 1400 1450
        >;
    };

    // LED電源制御
    led_power: led_power {
        compatible = "zmk,ext-power-transient";
        control-gpios = <&gpio0 9 (GPIO_ACTIVE_LOW)>; // NFC1
    };

    // アニメーション構成
    animation: animation {
        compatible = "zmk,animation";
        drivers = <&led_strip>;
        pixels = <&pixel 0 0>, <&pixel 1 0>, <&pixel 2 0>, <&pixel 3 0>;
        chain-lengths = <4>;
    };

    // アニメーション制御ノード
    root_animation: animation_0 {
        compatible = "zmk,animation-control";
        label = "ANIMATION_CTRL_0";
        powered-animations = <&endpoint_status &rainbow_animation>;
        battery-animations = <&empty_animation>;
        behavior-animations = <&battery_status &endpoint_status &animation_layer_status>;
        init-animation = <&init_animation>;
        activation-animation = <&battery_status>;
        activation-animation-duration-ms = <1000>;
        ext-power = <&led_power>;
    };

    // アニメーション定義群
    init_animation: init_animation {
        compatible = "zmk,animation-compose";
        animations = <&battery_status &black_animation &endpoint_status>;
        durations-ms = <1000 200 1000>;
    };

    black_animation: black_animation {
        compatible = "zmk,animation-solid";
        pixels = <0 1 2 3>;
        colors = <HSL(0, 0, 0)>;
    };

    empty_animation: empty_animation {
        compatible = "zmk,animation-empty";
        status = "okay";
    };

    rainbow_animation: rainbow_animation {
        compatible = "zmk,animation-solid";
        status = "okay";
        pixels = <0 1 2 3>;
        colors = <
            HSL(0, 100, 50)
            HSL(60, 100, 50)
            HSL(120, 100, 50)
            HSL(180, 100, 50)
            HSL(240, 100, 50)
            HSL(300, 100, 50)
        >;
    };

    red_animation: red_animation {
        compatible = "zmk,animation-solid";
        status = "okay";
        pixels = <0 1 2 3>;
        colors = <HSL(0, 100, 50)>;
    };

    endpoint_status: endpoint_status {
        compatible = "zmk,animation-endpoint";
        status = "okay";
        pixels = <0 1 2 3>;
        color-open = <HSL(60, 100, 50)>;
        color-connected = <HSL(240, 100, 50)>;
        color-disconnected = <HSL(0, 100, 50)>;
        color-usb = <HSL(120, 100, 25)>;
    };

    battery_status: battery_status {
        compatible = "zmk,animation-battery-status";
        status = "okay";
        pixels = <0 1 2 3>;
        color-high = <HSL(120, 100, 50)>;
        color-middle = <HSL(60, 100, 50)>;
        color-low = <HSL(0, 100, 50)>;
    };
};

// ADCを有効化
&adc {
    status = "okay";
};

// SPIとLED設定
&pinctrl {
    spi3_default: spi3_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 10)>; // NFC2
        };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 10)>;
            low-power-enable;
        };
    };
};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";
        reg = <0>;
        spi-max-frequency = <4000000>;
        chain-length = <4>;
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <
            LED_COLOR_ID_GREEN
            LED_COLOR_ID_RED
            LED_COLOR_ID_BLUE
        >;
    };
};

// レイヤー状態表示アニメーション設定
&animation_layer_status {
    pixels = <0 1 2 3>;
    default-color = <HSL(240, 100, 50)>; // blue
    colors = <
        HSL(193, 100, 47)  // Layer 0: cyan
        HSL(0, 100, 40)    // Layer 1: red
        HSL(0, 100, 100)   // Layer 2: white
        HSL(29, 88, 51)    // Layer 3: orange
    >;
};
