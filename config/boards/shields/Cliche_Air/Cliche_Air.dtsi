#include <dt-bindings/zmk/matrix_transform.h>
#include <zmk_driver_animation/animation.dtsi>
#include <zmk_driver_animation/animation_layer_status.dtsi>
#include <dt-bindings/zmk_driver_animation/animation_control.h>
#include <dt-bindings/zmk_driver_animation/animation_trigger.h>
#include <dt-bindings/input/input-event-codes.h>
#include <dt-bindings/led/led.h>
#include <behaviors/animation_trigger.dtsi>
#include <input/processors.dtsi>

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;

        zmk,physical-layout = &default_layout;
        zmk,battery = &vbatt;

        zmk,animation = &root_animation;
        zmk,animation-control = &root_animation;
    };

    // マトリクス変換
    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <11>;
        rows = <4>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)                     RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)             RC(3,6) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)     RC(3,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10)
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5)     RC(3,8) RC(3,9)                         RC(3,10)
        >;
    };

    // KSCAN（GPIOマトリクス）
    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";
        row-gpios
            = <&xiao_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
    };

    // 入力プロセッサとトラックボール処理
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors = <&zip_temp_layer TRACKBALL_L 500>;

        scroller {
            layers = <SCROLL_L>;
            input-processors = <&zip_xy_scaler 1 60 &zip_xy_to_scroll_mapper>;
        };
    };

    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <100>;
        excluded-positions = <19 20 21 22 32 33 41 52 53 54 55 56 57 58 59>;
    };

    // 🔋 Ni-MH単四×1（昇圧入力側測定）
    vbatt: vbatt {
        compatible = "zmk,battery-voltage-divider";
        io-channels = <&adc 0>;

        // 分圧抵抗例：R1=470kΩ（上側）, R2=100kΩ（下側）
        // 1.45V入力時 → 約0.25VがADCへ入力
        output-ohms = <100000>;
        full-ohms = <570000>;   // ← 修正済み（括弧削除・数値直記）

        // Ni-MH単セル電圧特性（mV単位）
        // 1.0V: 空 / 1.45V: 満充電
        mv-to-pct-thresholds = <
            1000 1050 1100 1150 1180 1200 1250 1300 1350 1400 1450
        >;
    };

    // LED電源制御
    led_power: led_power {
        compatible = "zmk,ext-power-transient";
        control-gpios = <&gpio0 9 (GPIO_ACTIVE_LOW)>; // NFC1
    };

    // アニメーション構成
    animation: animation {
        compatible = "zmk,animation";
        drivers = <&led_strip>;
        pixels = <&pixel 0 0>,
                 <&pixel 1 0>,
                 <&pixel 2 0>,
                 <&pixel 3 0>;
        chain-lengths = <4>;
    };

    // アニメーション制御ノード
    root_animation: animation_0 {
        compatible = "zmk,animation-control";
        label = "ANIMATION_CTRL_0";
        powered-animations = <&endpoint_status &rainbow_animation>;
        battery-animations = <&empty_animation>;
        behavior-animations = <&battery_status &endpoint_status &animation_layer_status>;
        init-animation = <&init_animation>;
        activation-animation = <&battery_status>;
        activation-animation-duration-ms = <1000>;
        ext-power = <&led_power>;
    };

    // アニメーション定義群
    init_animation: init_animation {
        compatible = "zmk,animation-compose";
        animations = <&battery_status &black_animation &endpoint_status>;
        durations-ms = <1000 200 1000>;
    };

    black_animation: black_animation {
        compatible = "zmk,animation-solid";
        pixels = <0 1 2 3>;
        colors = <HSL(0, 0, 0)>;
    };

    empty_animation: empty_animation {
        compatible = "zmk,animation-empty";
        status = "okay";
    };

    rainbow_animation: rainbow_animation {
        compatible = "zmk,animation-solid";
        status = "okay";
        pixels = <0 1 2 3>;
        colors = <HSL(0, 100, 50) HSL(60, 100, 50) HSL(120, 100, 50)
                  HSL(180, 100, 50) HSL(240, 100, 50) HSL(300, 100, 50)>;
    };

    red_animation: red_animation {
        compatible = "zmk,animation-solid";
        status = "okay";
        pixels = <0 1 2 3>;
        colors = <HSL(0, 100, 50)>;
    };

    endpoint_status: endpoint_status {
        compatible = "zmk,animation-endpoint";
        status = "okay";
        pixels = <0 1 2 3>;
        color-open = <HSL(60, 100, 50)>;
        color-connected = <HSL(240, 100, 50)>;
        color-disconnected = <HSL(0, 100, 50)>;
        color-usb = <HSL(120, 100, 25)>;
    };

    battery_status: battery_status {
        compatible = "zmk,animation-battery-status";
        status = "okay";
        pixels = <0 1 2 3>;
        color-high = <HSL(120, 100, 50)>;
        color-middle = <HSL(60, 100, 50)>;
        color-low = <HSL(0, 100, 50)>;
    };
};

// ADCを有効化
&adc {
    status = "okay";
};

// SPIとLED設定
&pinctrl {
    spi3_default: spi3_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 10)>; // NFC2
        };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 10)>;
            low-power-enable;
        };
    };
};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";

    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";

        reg = <0>;
        spi-max-frequency = <4000000>;

        chain-length = <4>;
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN
                         LED_COLOR_ID_RED
                         LED_COLOR_ID_BLUE>;
    };
};

// レイヤー状態表示アニメーション設定
&animation_layer_status {
    pixels = <0 1 2 3>;
    default-color = <0x0000FF>; // blue

    colors = <
        0x00B8E6   // Layer 0: HSL(193,100,47) → #00B8E6 (Cyan)
        0xFF0000   // Layer 1: HSL(0,100,40) → #FF0000 (Red)
        0xFFFFFF   // Layer 2: HSL(0,100,100) → #FFFFFF (White)
        0xFF8000   // Layer 3: HSL(29,88,51) → #FF8000 (Orange)
    >;
};
